def aws_url
def dockerImageName
def imageID
pipeline {
    agent any
	parameters{
		string(name: 'dockerBuildNumber', description: 'upstream jobs build number')
	}
    stages {
  		
  		stage ('create docker registry url') {
            steps {
              script {
                
                     def aws_account_number = "607187345607"
                     echo "${aws_account_number}"
                     def region = "eu-central-1"
                     aws_url = aws_account_number.trim() + ".dkr.ecr." + region + ".amazonaws.com"
  				   echo "---------------------------------------------------"
  				   echo "${aws_url}"
              }
            }
          }
  		
		
		stage('register the task definition with aws'){
            steps{
                script {
				dir('devops'){
					 
					 sh "cp /var/lib/jenkins/workspace/Maven_project_buildPipeline/devops/config.json ."
					 sh "jq  --arg aws_url \"$aws_url\" --arg dockerBuildNumber \"${params.dockerBuildNumber}\" '.containerDefinitions[].image = \"$aws_url/mobilebilling/$dockerBuildNumber\"' config.json > task.json"
                     sh "aws ecs register-task-definition --cli-input-json file://task.json --region eu-central-1"
                  }  
                }
            }
        }
		stage ('check service and create service'){
            steps {
                    script {
                        println parametersMaps as String
                        try {
                            def serviceExist=sh(script: "`aws ecs describe-services --services mobilebilling --cluster mobilebilling --region eu-central-1 | jq .failures[]`", returnStdout: true)
                            sh "aws ecs describe-task-definition --task-definition mobilebilling --region eu-central-1 | jq .taskDefinition.revision > revisionFile"
                            def revision = readFile('revisionFile').trim()
                            echo "existing service ${revision}"
                            if (serviceExist.isEmpty()) {
                                  sh "aws ecs update-service --cluster mobilebilling --region eu-central-1 --service mobilebilling --task-definition mobilebilling:${revision} --desired-count 1"
                            }
                        } catch (e) {
                            echo "create New Service"
                            sh "aws ecs create-service --service-name mobilebilling --desired-count 1 --task-definition mobilebilling --cluster mobilebilling --region eu-central-1"
                            createService = true
                        }
                    }

            }
        }
    }
}